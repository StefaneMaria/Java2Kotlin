/* Java2Kotlin.java */
/* Generated By:JavaCC: Do not edit this line. Java2Kotlin.java */
public class Java2Kotlin implements Java2KotlinConstants {
    public static void main(String[] args) throws ParseException {
      Java2Kotlin parser = new Java2Kotlin(System.in);
      System.out.println(parser.Input());
    }

  static final public String Input() throws ParseException {String code = ""; String assignCode = "";
    if (jj_2_1(3)) {
      code = DeclareVariable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 32:{
        assignCode = AssignVariable();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        code = PrintLine();
        break;
        }
      case 34:{
        code = ReadLine();
        break;
        }
      case ENCAP:
      case STATIC:
      case BYTE_T:
      case SHORT_T:
      case INT_T:
      case LONG_T:
      case FLOAT_T:
      case DOUBLE_T:
      case BOOLEAN_T:
      case CHAR_T:
      case STRING_T:{
        code = FuncDeclaration();
        break;
        }
      case FOR:{
        code = RepeatingStruc();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return code + assignCode;}
    throw new Error("Missing return statement in function");
}

  static final public String DeclareVariable() throws ParseException {String type = ""; String identifier = "";
    type = TypeIndentifier();
    identifier = tokenToString();
{if ("" != null) return "var " + identifier + ": " + type;}
    throw new Error("Missing return statement in function");
}

  static final public String AssignVariable() throws ParseException {String code = "";
    jj_consume_token(32);
    code = tokenToString();
{if ("" != null) return " = " + code;}
    throw new Error("Missing return statement in function");
}

  static final public String TypeIndentifier() throws ParseException {String code = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BYTE_T:{
      jj_consume_token(BYTE_T);
{if ("" != null) return "Byte";}
      break;
      }
    case SHORT_T:{
      jj_consume_token(SHORT_T);
{if ("" != null) return "Short";}
      break;
      }
    case INT_T:{
      jj_consume_token(INT_T);
{if ("" != null) return "Int";}
      break;
      }
    case LONG_T:{
      jj_consume_token(LONG_T);
{if ("" != null) return "Long";}
      break;
      }
    case FLOAT_T:{
      jj_consume_token(FLOAT_T);
{if ("" != null) return "Float";}
      break;
      }
    case DOUBLE_T:{
      jj_consume_token(DOUBLE_T);
{if ("" != null) return "Double";}
      break;
      }
    case BOOLEAN_T:{
      jj_consume_token(BOOLEAN_T);
{if ("" != null) return "Boolean";}
      break;
      }
    case CHAR_T:{
      jj_consume_token(CHAR_T);
{if ("" != null) return "Char";}
      break;
      }
    case STRING_T:{
      jj_consume_token(STRING_T);
{if ("" != null) return "String";}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public String PrintLine() throws ParseException {String code = "";
    jj_consume_token(33);
    code = tokenToString();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
{if ("" != null) return "println(" + code + ")";}
    throw new Error("Missing return statement in function");
}

  static final public String ReadLine() throws ParseException {String code = "";
    jj_consume_token(34);
    jj_consume_token(SEMICOLON);
{if ("" != null) return "readln()";}
    throw new Error("Missing return statement in function");
}

  static final public String tokenToString() throws ParseException {Token token = new Token();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      token = jj_consume_token(STRING);
{if ("" != null) return token.image;}
      break;
      }
    case IDENTIFIER:{
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return token.image;}
      break;
      }
    case INTEGER:{
      token = jj_consume_token(INTEGER);
{if ("" != null) return token.image;}
      break;
      }
    case PLUSPLUS:{
      token = jj_consume_token(PLUSPLUS);
{if ("" != null) return "..";}
      break;
      }
    case MINUSMINUS:{
      token = jj_consume_token(MINUSMINUS);
{if ("" != null) return " down to ";}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public String ParamList() throws ParseException {StringBuilder sb = new StringBuilder(); String id = "", type = "";
    if (jj_2_2(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
sb.append("()");
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        type = TypeIndentifier();
        id = tokenToString();
sb.append("(" + id + ": " + type);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 35:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_1;
          }
          jj_consume_token(35);
          type = TypeIndentifier();
          id = tokenToString();
sb.append(", " + id + ": " + type);
        }
        jj_consume_token(RPAREN);
sb.append(")");
        {if ("" != null) return sb.toString();}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public String FuncDeclaration() throws ParseException {String funcName = "", funcType = "", params = "", code = ""; StringBuilder sb = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENCAP:{
      jj_consume_token(ENCAP);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
      jj_consume_token(STATIC);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    funcType = TypeIndentifier();
    funcName = tokenToString();
    params = ParamList();
    jj_consume_token(36);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENCAP:
      case STATIC:
      case FOR:
      case BYTE_T:
      case SHORT_T:
      case INT_T:
      case LONG_T:
      case FLOAT_T:
      case DOUBLE_T:
      case BOOLEAN_T:
      case CHAR_T:
      case STRING_T:
      case 33:
      case 34:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      code = Input();
sb.append("\n").append(code);
    }
    jj_consume_token(37);
{if ("" != null) return "fun " + funcName + " " + params + ": " + funcType + "{" + sb.toString() + "}";}
    throw new Error("Missing return statement in function");
}

  static final public String RepeatingStruc() throws ParseException {String code = "";
    code = ForLoop();
{if ("" != null) return code;}
    throw new Error("Missing return statement in function");
}

  static final public String ForLoop() throws ParseException {String id = "", list = "",init = "", end = "", assign = "";
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    TypeIndentifier();
    id = tokenToString();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      jj_consume_token(32);
      init = tokenToString();
      jj_consume_token(SEMICOLON);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COMPARE);
      end = tokenToString();
      jj_consume_token(SEMICOLON);
      jj_consume_token(IDENTIFIER);
      assign = tokenToString();
      jj_consume_token(RPAREN);
      jj_consume_token(38);
{if ("" != null) return "for (" + id + " in " + init + assign + end + ")";}
      break;
      }
    case 39:{
      jj_consume_token(39);
      list = tokenToString();
      jj_consume_token(RPAREN);
      jj_consume_token(38);
{if ("" != null) return "for (" + id + " in " + list + ")";}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_tokenToString_130_7_21()
 {
    if (jj_scan_token(MINUSMINUS)) return true;
    return false;
  }

  static private boolean jj_3R_tokenToString_129_7_20()
 {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  static private boolean jj_3R_Input_76_13_4()
 {
    if (jj_3R_AssignVariable_95_5_7()) return true;
    return false;
  }

  static private boolean jj_3R_tokenToString_128_7_19()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_tokenToString_127_7_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_tokenToString_126_5_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_tokenToString_126_5_17()) {
    jj_scanpos = xsp;
    if (jj_3R_tokenToString_127_7_18()) {
    jj_scanpos = xsp;
    if (jj_3R_tokenToString_128_7_19()) {
    jj_scanpos = xsp;
    if (jj_3R_tokenToString_129_7_20()) {
    jj_scanpos = xsp;
    if (jj_3R_tokenToString_130_7_21()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_tokenToString_126_5_17()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_DeclareVariable_89_5_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Input_76_13_4()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_109_7_16()
 {
    if (jj_scan_token(STRING_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_108_7_15()
 {
    if (jj_scan_token(CHAR_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_107_7_14()
 {
    if (jj_scan_token(BOOLEAN_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_106_7_13()
 {
    if (jj_scan_token(DOUBLE_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_105_7_12()
 {
    if (jj_scan_token(FLOAT_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_104_7_11()
 {
    if (jj_scan_token(LONG_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_103_7_10()
 {
    if (jj_scan_token(INT_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_102_7_9()
 {
    if (jj_scan_token(SHORT_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_101_5_8()
 {
    if (jj_scan_token(BYTE_T)) return true;
    return false;
  }

  static private boolean jj_3R_TypeIndentifier_101_5_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeIndentifier_101_5_8()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_102_7_9()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_103_7_10()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_104_7_11()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_105_7_12()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_106_7_13()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_107_7_14()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_108_7_15()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeIndentifier_109_7_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_AssignVariable_95_5_7()
 {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_DeclareVariable_89_5_3()
 {
    if (jj_3R_TypeIndentifier_101_5_5()) return true;
    if (jj_3R_tokenToString_126_5_6()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Java2KotlinTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x5fe700,0x5fe000,0xc2000090,0x0,0x8000000,0x100,0x200,0x5fe700,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1,0x6,0x0,0x0,0x8,0x0,0x0,0x0,0x6,0x81,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Java2Kotlin(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Java2Kotlin(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Java2KotlinTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Java2Kotlin(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new Java2KotlinTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Java2KotlinTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Java2Kotlin(Java2KotlinTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Java2KotlinTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[40];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 10; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 40; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
